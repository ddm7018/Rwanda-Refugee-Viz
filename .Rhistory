svm.model <- eval(parse(text=paste0("svm(",ele," ~ . , data = train, method= 'class')")))
pred <- predict(svm.model,test , type = "class")
predTable <- table(pred, eval(parse(text=paste0("test$",ele))))
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val <- round(val,2)
print(sprintf("SVM Accuracy is %s percent",val))
tryCatch({
nn.model <- eval(parse(text=paste0("nnet(",ele," ~ . , data = train, ,linout=FALSE, size=5, trace = FALSE)")))
pred = predict(nn.model,test , type = "class")
predTable <- table(pred, test$competition)
sum(diag(predTable))/sum(predTable)
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val <- round(val,2)
print(sprintf("NN Accuracy is %s percent",val))
}, warning = function(e) {
})
print("-----------------")
}
}
run_classfication_models_2(mug)
run_machine_learning_2(mug)
run_machine_learning_2(kim)
run_machine_learning_2 <- function(data, remove_camp = TRUE){
coln <- c()
for(ele in colnames(data)){
if (eval(parse(text=paste0("is.numeric(data$",ele,")"))) == FALSE){
coln <- c(ele, coln)
}
}
if(remove_camp == TRUE){
coln <- coln[coln != "camp_name"]
}
sample <- sample.int(n = nrow(data), size = floor(.75*nrow(data)), replace = F)
train  <- data[sample, ]
test   <- data[-sample, ]
#running through all non numeric columns with sufficient data through classifcation tress, neural netwokrks, and SVMs
for(ele in coln ){
print(ele)
tree.model <- eval(parse(text=paste0("rpart(",ele," ~ . , data = train, method= 'class')")))
pred = predict(tree.model,test , type = "class")
predTable <- table(pred, eval(parse(text=paste0("test$",ele))))
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val <- round(val,2)
print(sprintf("CT Accuracy is %s percent",val))
tryCatch({
svm.model <- eval(parse(text=paste0("svm(",ele," ~ . , data = train, method= 'class')")))
pred <- predict(svm.model,test , type = "class")
predTable <- table(pred, eval(parse(text=paste0("test$",ele))))
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val <- round(val,2)
print(sprintf("SVM Accuracy is %s percent",val))
}, warning = function(e) {
})
tryCatch({
nn.model <- eval(parse(text=paste0("nnet(",ele," ~ . , data = train, ,linout=FALSE, size=5, trace = FALSE)")))
pred = predict(nn.model,test , type = "class")
predTable <- table(pred, test$competition)
sum(diag(predTable))/sum(predTable)
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val <- round(val,2)
print(sprintf("NN Accuracy is %s percent",val))
}, warning = function(e) {
})
print("-----------------")
}
}
run_machine_learning_2(mug)
run_machine_learning_2(kim)
run_machine_learning_2 <- function(data, remove_camp = TRUE){
coln <- c()
for(ele in colnames(data)){
if (eval(parse(text=paste0("is.numeric(data$",ele,")"))) == FALSE){
coln <- c(ele, coln)
}
}
if(remove_camp == TRUE){
coln <- coln[coln != "camp_name"]
}
sample <- sample.int(n = nrow(data), size = floor(.75*nrow(data)), replace = F)
train  <- data[sample, ]
test   <- data[-sample, ]
#running through all non numeric columns with sufficient data through classifcation tress, neural netwokrks, and SVMs
for(ele in coln ){
print(ele)
tree.model <- eval(parse(text=paste0("rpart(",ele," ~ . , data = train, method= 'class')")))
pred = predict(tree.model,test , type = "class")
predTable <- table(pred, eval(parse(text=paste0("test$",ele))))
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val <- round(val,2)
print(sprintf("CT Accuracy is %s percent",val))
tryCatch({
svm.model <- eval(parse(text=paste0("svm(",ele," ~ . , data = train, method= 'class')")))
pred <- predict(svm.model,test , type = "class")
predTable <- table(pred, eval(parse(text=paste0("test$",ele))))
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val <- round(val,2)
print(sprintf("SVM Accuracy is %s percent",val))
}, error = function(e) {
})
tryCatch({
nn.model <- eval(parse(text=paste0("nnet(",ele," ~ . , data = train, ,linout=FALSE, size=5, trace = FALSE)")))
pred = predict(nn.model,test , type = "class")
predTable <- table(pred, test$competition)
sum(diag(predTable))/sum(predTable)
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val <- round(val,2)
print(sprintf("NN Accuracy is %s percent",val))
}, warning = function(e) {
})
print("-----------------")
}
}
run_machine_learning_2(mug)
run_machine_learning_2(kim)
shiny::runApp()
library(leaflet)
library(RColorBrewer)
library(scales)
library(lattice)
library(dplyr)
library(rpart)
library(e1071)
library(nnet)
library(rpart.plot)
library(devtools)
library(shiny)
runApp('~/Documents/Projects/Handwriting-Test/test')
runApp('~/Documents/Projects/Handwriting-Test/test')
library(leaflet)
runApp()
input
input$camps
runApp()
runApp()
input$svm_plot1
input$svm_plot2
plot(model, rwanda, input$svm_plot1 ~ input$svm_plot2)
plot(model, rwanda, camp_name ~ camp_name)
runApp()
runApp()
plot(model, rwanda, input$svm_plot1 ~ input$svm_plot2)
plot(model, rwanda, y ~ x)
runApp()
plot(model, rwanda, input$svm_plot1 ~ input$svm_plot2)
paste0("plot(model, rwanda,"input$svm_plot1," ~ " input$svm_plot2")
paste0("plot(model, rwanda,",input$svm_plot1," ~ ", input$svm_plot2)))
paste0("plot(model, rwanda,",input$svm_plot1," ~ ", input$svm_plot2))
paste0("plot(model, rwanda,",input$svm_plot1," ~ ", input$svm_plot2))))
paste0("plot(model, rwanda,",input$svm_plot1," ~ ", input$svm_plot2)
eval(parse(text=paste0("plot(model, rwanda,",input$svm_plot1," ~ ", input$svm_plot2,")")))
runApp()
runApp()
run_machine_learning_2 <- function(data, remove_camp = TRUE){
coln <- c()
for(ele in colnames(data)){
if (eval(parse(text=paste0("is.numeric(data$",ele,")"))) == FALSE){
coln <- c(ele, coln)
}
}
if(remove_camp == TRUE){
coln <- coln[coln != "camp_name"]
}
sample <- sample.int(n = nrow(data), size = floor(.75*nrow(data)), replace = F)
train  <- data[sample, ]
test   <- data[-sample, ]
#running through all non numeric columns with sufficient data through classifcation tress, neural netwokrks, and SVMs
for(ele in coln ){
print(ele)
tree.model <- eval(parse(text=paste0("rpart(",ele," ~ . , data = train, method= 'class')")))
pred = predict(tree.model,test , type = "class")
predTable <- table(pred, eval(parse(text=paste0("test$",ele))))
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val <- round(val,2)
print(sprintf("CT Accuracy is %s percent",val))
tryCatch({
svm.model <- eval(parse(text=paste0("svm(",ele," ~ . , data = train, method= 'class')")))
pred <- predict(svm.model,test , type = "class")
predTable <- table(pred, eval(parse(text=paste0("test$",ele))))
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val1 <- round(val,2)
print(sprintf("SVM Accuracy is %s percent",val1))
}, error = function(e) {
})
tryCatch({
nn.model <- eval(parse(text=paste0("nnet(",ele," ~ . , data = train, ,linout=FALSE, size=5, trace = FALSE)")))
pred = predict(nn.model,test , type = "class")
predTable <- table(pred, test$competition)
sum(diag(predTable))/sum(predTable)
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val <- round(val,2)
print(sprintf("NN Accuracy is %s percent",val))
}, warning = function(e) {
})
print("-----------------")
}
}
run_machine_learning_2(mug)
val1
run_machine_learning_2 <- function(data, remove_camp = TRUE){
coln <- c()
for(ele in colnames(data)){
if (eval(parse(text=paste0("is.numeric(data$",ele,")"))) == FALSE){
coln <- c(ele, coln)
}
}
if(remove_camp == TRUE){
coln <- coln[coln != "camp_name"]
}
sample <- sample.int(n = nrow(data), size = floor(.75*nrow(data)), replace = F)
train  <- data[sample, ]
test   <- data[-sample, ]
#running through all non numeric columns with sufficient data through classifcation tress, neural netwokrks, and SVMs
for(ele in coln ){
print(ele)
tree.model <- eval(parse(text=paste0("rpart(",ele," ~ . , data = train, method= 'class')")))
pred = predict(tree.model,test , type = "class")
predTable <- table(pred, eval(parse(text=paste0("test$",ele))))
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val <- round(val,2)
print(sprintf("CT Accuracy is %s percent",val))
tryCatch({
svm.model <- eval(parse(text=paste0("svm(",ele," ~ . , data = train, method= 'class')")))
pred <- predict(svm.model,test , type = "class")
predTable <- table(pred, eval(parse(text=paste0("test$",ele))))
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val1 <- round(val,2)
print(sprintf("SVM Accuracy is %s percent",val1))
}, error = function(e) {
})
tryCatch({
nn.model <- eval(parse(text=paste0("nnet(",ele," ~ . , data = train, ,linout=FALSE, size=5, trace = FALSE)")))
pred = predict(nn.model,test , type = "class")
predTable <- table(pred, test$competition)
sum(diag(predTable))/sum(predTable)
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val <- round(val,2)
print(sprintf("NN Accuracy is %s percent",val))
}, warning = function(e) {
})
print(val1)
print("-----------------")
}
}
run_machine_learning_2(mug)
run_machine_learning_2 <- function(data, remove_camp = TRUE){
coln <- c()
for(ele in colnames(data)){
if (eval(parse(text=paste0("is.numeric(data$",ele,")"))) == FALSE){
coln <- c(ele, coln)
}
}
if(remove_camp == TRUE){
coln <- coln[coln != "camp_name"]
}
sample <- sample.int(n = nrow(data), size = floor(.75*nrow(data)), replace = F)
train  <- data[sample, ]
test   <- data[-sample, ]
#running through all non numeric columns with sufficient data through classifcation tress, neural netwokrks, and SVMs
for(ele in coln ){
print(ele)
tree.model <- eval(parse(text=paste0("rpart(",ele," ~ . , data = train, method= 'class')")))
pred = predict(tree.model,test , type = "class")
predTable <- table(pred, eval(parse(text=paste0("test$",ele))))
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val1 <- round(val,2)
#print(sprintf("CT Accuracy is %s percent",val))
tryCatch({
svm.model <- eval(parse(text=paste0("svm(",ele," ~ . , data = train, method= 'class')")))
pred <- predict(svm.model,test , type = "class")
predTable <- table(pred, eval(parse(text=paste0("test$",ele))))
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val2 <- round(val,2)
#print(sprintf("SVM Accuracy is %s percent",val1))
}, error = function(e) {
})
tryCatch({
nn.model <- eval(parse(text=paste0("nnet(",ele," ~ . , data = train, ,linout=FALSE, size=5, trace = FALSE)")))
pred = predict(nn.model,test , type = "class")
predTable <- table(pred, test$competition)
sum(diag(predTable))/sum(predTable)
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val3 <- round(val,2)
#print(sprintf("NN Accuracy is %s percent",val))
}, warning = function(e) {
})
print(val1, val2, val3)
print("-----------------")
}
}
run_machine_learning_2(mug)
run_machine_learning_2 <- function(data, remove_camp = TRUE){
coln <- c()
for(ele in colnames(data)){
if (eval(parse(text=paste0("is.numeric(data$",ele,")"))) == FALSE){
coln <- c(ele, coln)
}
}
if(remove_camp == TRUE){
coln <- coln[coln != "camp_name"]
}
sample <- sample.int(n = nrow(data), size = floor(.75*nrow(data)), replace = F)
train  <- data[sample, ]
test   <- data[-sample, ]
#running through all non numeric columns with sufficient data through classifcation tress, neural netwokrks, and SVMs
for(ele in coln ){
print(ele)
tree.model <- eval(parse(text=paste0("rpart(",ele," ~ . , data = train, method= 'class')")))
pred = predict(tree.model,test , type = "class")
predTable <- table(pred, eval(parse(text=paste0("test$",ele))))
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val1 <- round(val,2)
#print(sprintf("CT Accuracy is %s percent",val))
tryCatch({
svm.model <- eval(parse(text=paste0("svm(",ele," ~ . , data = train, method= 'class')")))
pred <- predict(svm.model,test , type = "class")
predTable <- table(pred, eval(parse(text=paste0("test$",ele))))
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val2 <- round(val,2)
#print(sprintf("SVM Accuracy is %s percent",val1))
}, error = function(e) {
})
tryCatch({
nn.model <- eval(parse(text=paste0("nnet(",ele," ~ . , data = train, ,linout=FALSE, size=5, trace = FALSE)")))
pred = predict(nn.model,test , type = "class")
predTable <- table(pred, test$competition)
sum(diag(predTable))/sum(predTable)
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val3 <- round(val,2)
#print(sprintf("NN Accuracy is %s percent",val))
}, warning = function(e) {
})
print(val1)
print(val2)
print(val3)
print("-----------------")
}
}
run_machine_learning_2(mug)
print(2,"")
print(sprintf("t",2))
print(sprintf("t","2"))
print(sprintf("%s","2"))
print(sprintf("%s , %s , %s","2"))
print(sprintf("%s , %s , %s","2","2"))
print(sprintf("%s , %s , %s","2","2","2"))
print(sprintf("%s %s , %s , %s","Te","2","2","2"))
run_machine_learning_2 <- function(data, remove_camp = TRUE){
coln <- c()
for(ele in colnames(data)){
if (eval(parse(text=paste0("is.numeric(data$",ele,")"))) == FALSE){
coln <- c(ele, coln)
}
}
if(remove_camp == TRUE){
coln <- coln[coln != "camp_name"]
}
sample <- sample.int(n = nrow(data), size = floor(.75*nrow(data)), replace = F)
train  <- data[sample, ]
test   <- data[-sample, ]
#running through all non numeric columns with sufficient data through classifcation tress, neural netwokrks, and SVMs
for(ele in coln ){
print(ele)
tree.model <- eval(parse(text=paste0("rpart(",ele," ~ . , data = train, method= 'class')")))
pred = predict(tree.model,test , type = "class")
predTable <- table(pred, eval(parse(text=paste0("test$",ele))))
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val1 <- round(val,2)
#print(sprintf("CT Accuracy is %s percent",val))
tryCatch({
svm.model <- eval(parse(text=paste0("svm(",ele," ~ . , data = train, method= 'class')")))
pred <- predict(svm.model,test , type = "class")
predTable <- table(pred, eval(parse(text=paste0("test$",ele))))
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val2 <- round(val,2)
#print(sprintf("SVM Accuracy is %s percent",val1))
}, error = function(e) {
})
tryCatch({
nn.model <- eval(parse(text=paste0("nnet(",ele," ~ . , data = train, ,linout=FALSE, size=5, trace = FALSE)")))
pred = predict(nn.model,test , type = "class")
predTable <- table(pred, test$competition)
sum(diag(predTable))/sum(predTable)
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val3 <- round(val,2)
#print(sprintf("NN Accuracy is %s percent",val))
}, warning = function(e) {
})
print(sprintf("%s %s , %s , %s",ele,val1,val2,val3))
print("-----------------")
}
}
run_machine_learning_2(mug)
run_machine_learning_2 <- function(data, remove_camp = TRUE){
coln <- c()
for(ele in colnames(data)){
if (eval(parse(text=paste0("is.numeric(data$",ele,")"))) == FALSE){
coln <- c(ele, coln)
}
}
if(remove_camp == TRUE){
coln <- coln[coln != "camp_name"]
}
sample <- sample.int(n = nrow(data), size = floor(.75*nrow(data)), replace = F)
train  <- data[sample, ]
test   <- data[-sample, ]
#running through all non numeric columns with sufficient data through classifcation tress, neural netwokrks, and SVMs
for(ele in coln ){
tree.model <- eval(parse(text=paste0("rpart(",ele," ~ . , data = train, method= 'class')")))
pred = predict(tree.model,test , type = "class")
predTable <- table(pred, eval(parse(text=paste0("test$",ele))))
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val1 <- round(val,2)
#print(sprintf("CT Accuracy is %s percent",val))
tryCatch({
svm.model <- eval(parse(text=paste0("svm(",ele," ~ . , data = train, method= 'class')")))
pred <- predict(svm.model,test , type = "class")
predTable <- table(pred, eval(parse(text=paste0("test$",ele))))
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val2 <- round(val,2)
#print(sprintf("SVM Accuracy is %s percent",val1))
}, error = function(e) {
})
tryCatch({
nn.model <- eval(parse(text=paste0("nnet(",ele," ~ . , data = train, ,linout=FALSE, size=5, trace = FALSE)")))
pred = predict(nn.model,test , type = "class")
predTable <- table(pred, test$competition)
sum(diag(predTable))/sum(predTable)
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val3 <- round(val,2)
#print(sprintf("NN Accuracy is %s percent",val))
}, warning = function(e) {
})
print(sprintf("%s %s , %s , %s",ele,val1,val2,val3))
}
}
run_machine_learning_2(mug)
rwanda
run_machine_learning_2(rwanda)
run_machine_learning_2 <- function(data, remove_camp = TRUE){
coln <- c()
for(ele in colnames(data)){
if (eval(parse(text=paste0("is.numeric(data$",ele,")"))) == FALSE){
coln <- c(ele, coln)
}
}
if(remove_camp == TRUE){
coln <- coln[coln != "camp_name"]
}
sample <- sample.int(n = nrow(data), size = floor(.75*nrow(data)), replace = F)
train  <- data[sample, ]
test   <- data[-sample, ]
#running through all non numeric columns with sufficient data through classifcation tress, neural netwokrks, and SVMs
for(ele in coln ){
tree.model <- eval(parse(text=paste0("rpart(",ele," ~ . , data = train, method= 'class')")))
pred = predict(tree.model,test , type = "class")
predTable <- table(pred, eval(parse(text=paste0("test$",ele))))
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val1 <- round(val,2)
#print(sprintf("CT Accuracy is %s percent",val))
tryCatch({
svm.model <- eval(parse(text=paste0("svm(",ele," ~ . , data = train, method= 'class')")))
pred <- predict(svm.model,test , type = "class")
predTable <- table(pred, eval(parse(text=paste0("test$",ele))))
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val2 <- round(val,2)
#print(sprintf("SVM Accuracy is %s percent",val1))
}, error = function(e) {
})
tryCatch({
nn.model <- eval(parse(text=paste0("nnet(",ele," ~ . , data = train, ,linout=FALSE, size=5, trace = FALSE)")))
pred = predict(nn.model,test , type = "class")
predTable <- table(pred, test$competition)
sum(diag(predTable))/sum(predTable)
val <- sum(diag(predTable))/sum(predTable)
val <- val * 100
val3 <- round(val,2)
#print(sprintf("NN Accuracy is %s percent",val))
}, warning = function(e) {
})
print(sprintf("%s , %s , %s , %s",ele,val1,val2,val3))
}
}
run_machine_learning_2(mug)
run_machine_learning_2(kim)
